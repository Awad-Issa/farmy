// Farmy Database Schema
// PostgreSQL 15+ with Prisma ORM

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// IDENTITY & ACCESS
// ============================================================================

model User {
  id           String   @id @default(uuid())
  phone        String   @unique // Unique phone number (e.g., +970591234567)
  passwordHash String   @map("password_hash") // Argon2id hashed password
  name         String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  farmMemberships FarmMember[]
  superAdmin      SuperAdmin?
  refreshTokens   RefreshToken[]
  deviceTokens    DeviceToken[]
  notifications   NotificationInbox[]
  auditLogs       AuditLog[]

  @@map("users")
}

model RefreshToken {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  tokenHash  String    @unique @map("token_hash") // Hashed refresh token
  createdAt  DateTime  @default(now()) @map("created_at")
  expiresAt  DateTime  @map("expires_at")
  revokedAt  DateTime? @map("revoked_at")
  ip         String?
  userAgent  String?   @map("user_agent")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
  @@map("refresh_tokens")
}

model Farm {
  id        String   @id @default(uuid())
  name      String
  ownerId   String   @map("owner_id")
  settings  Json?    // Farm settings (tag config, color map, etc.)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  members             FarmMember[]
  animals             Animal[]
  breedingCycles      BreedingCycle[]
  breedingEvents      BreedingEvent[]
  healthEvents        HealthEvent[]
  treatments          Treatment[]
  weights             Weight[]
  feedPlans           FeedPlan[]
  lambFeedings        LambFeeding[]
  milkYields          MilkYield[]
  milkSales           MilkSale[]
  animalSales         AnimalSale[]
  inventoryItems      InventoryItem[]
  inventoryBatches    InventoryBatch[]
  inventoryTransactions InventoryTransaction[]
  suppliers           Supplier[]
  actionEvents        ActionEvent[]
  metricSnapshots     MetricSnapshot[]
  insightCards        InsightCard[]
  reminders           Reminder[]
  notifications       NotificationInbox[]
  tombstones          Tombstone[]
  auditLogs           AuditLog[]
  attachments         Attachment[]

  @@map("farms")
}

enum Role {
  OWNER
  ADMIN
  WORKER
  VET
}

model FarmMember {
  id       String   @id @default(uuid())
  farmId   String   @map("farm_id")
  userId   String   @map("user_id")
  role     Role
  joinedAt DateTime @default(now()) @map("joined_at")

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([farmId, userId])
  @@index([userId])
  @@map("farm_members")
}

model SuperAdmin {
  userId    String   @id @map("user_id")
  grantedAt DateTime @default(now()) @map("granted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("super_admins")
}

// ============================================================================
// ANIMALS & BREEDING
// ============================================================================

enum AnimalType {
  RAM
  EWE
  LAMB
}

enum AnimalSex {
  MALE
  FEMALE
}

enum AnimalStatus {
  ACTIVE
  SOLD
  DEAD
  CULLED
}

model Animal {
  id        String       @id @default(uuid())
  farmId    String       @map("farm_id")
  tagNumber String       @map("tag_number") // Unique per farm
  rfid      String?      @db.VarChar(15) // Optional 15-digit RFID
  type      AnimalType
  sex       AnimalSex
  status    AnimalStatus @default(ACTIVE)
  dob       DateTime?    @map("date_of_birth")
  sireId    String?      @map("sire_id") // Father
  damId     String?      @map("dam_id") // Mother
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)
  sire Animal? @relation("Sire", fields: [sireId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  dam  Animal? @relation("Dam", fields: [damId], references: [id], onUpdate: Restrict, onDelete: Restrict)

  // Relations
  offspringAsSire     Animal[]           @relation("Sire")
  offspringAsDam      Animal[]           @relation("Dam")
  breedingCyclesAsEwe BreedingCycle[]
  breedingEvents      BreedingEvent[]
  healthEvents        HealthEvent[]
  treatments          Treatment[]
  doses               Dose[]
  weights             Weight[]
  lambFeedings        LambFeeding[]
  milkYields          MilkYield[]
  animalSales         AnimalSale[]

  @@unique([farmId, tagNumber])
  @@index([farmId, status])
  @@index([farmId, type])
  @@index([farmId, updatedAt])
  @@index([rfid])
  @@map("animals")
}

enum BreedingCycleStatus {
  OPEN
  PREGNANT
  LAMBED
  FAILED
  ABORTED
}

enum PregnancyCheckResult {
  POSITIVE
  NEGATIVE
  UNCERTAIN
}

model BreedingCycle {
  id             String                 @id @default(uuid())
  eweId          String                 @map("ewe_id")
  farmId         String                 @map("farm_id")
  ins1Date       DateTime               @map("ins1_date") // First insemination
  ins2Date       DateTime?              @map("ins2_date") // Second insemination (+17d)
  check1Date     DateTime?              @map("check1_date") // First check (~28d)
  check1Result   PregnancyCheckResult?  @map("check1_result")
  check2Date     DateTime?              @map("check2_date") // Second check (~45-50d)
  check2Result   PregnancyCheckResult?  @map("check2_result")
  conceptionDate DateTime?              @map("conception_date") // Confirmed conception date
  dueStart       DateTime?              @map("due_start") // Due window start
  dueEnd         DateTime?              @map("due_end") // Due window end
  estDue         DateTime?              @map("estimated_due") // Estimated due date
  status         BreedingCycleStatus    @default(OPEN)
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")

  ewe  Animal @relation(fields: [eweId], references: [id], onDelete: Cascade)
  farm Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade)

  // Relations
  events BreedingEvent[]

  @@index([farmId, status])
  @@index([farmId, estDue])
  @@index([eweId])
  @@map("breeding_cycles")
}

enum BreedingEventType {
  INS1
  INS2
  CHECK1
  CHECK2
  LAMBING
  LOSS
  ABORTION
}

model BreedingEvent {
  id        String            @id @default(uuid())
  cycleId   String            @map("cycle_id")
  eweId     String            @map("ewe_id")
  farmId    String            @map("farm_id")
  type      BreedingEventType
  date      DateTime
  payload   Json? // Event-specific data (litter size, loss reason, etc.)
  createdBy String            @map("created_by")
  createdAt DateTime          @default(now()) @map("created_at")

  cycle BreedingCycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  ewe   Animal        @relation(fields: [eweId], references: [id], onDelete: Cascade)
  farm  Farm          @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([farmId, date])
  @@index([cycleId])
  @@map("breeding_events")
}

// ============================================================================
// HEALTH
// ============================================================================

enum HealthEventType {
  DIAGNOSIS
  TREATMENT
  VACCINE
  SUPPLEMENT
  CHECKUP
  INJURY
  DEATH
}

model HealthEvent {
  id            String          @id @default(uuid())
  animalId      String          @map("animal_id")
  farmId        String          @map("farm_id")
  type          HealthEventType
  date          DateTime
  diagnosisCode String?         @map("diagnosis_code") // Standard diagnosis code
  payload       Json? // Event-specific data
  createdBy     String          @map("created_by")
  createdAt     DateTime        @default(now()) @map("created_at")

  animal Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)
  farm   Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade)

  // Relations
  treatments Treatment[]

  @@index([farmId, date])
  @@index([animalId])
  @@map("health_events")
}

enum TreatmentRoute {
  ORAL
  INJECTION_IM
  INJECTION_IV
  INJECTION_SC
  TOPICAL
  OTHER
}

model Treatment {
  id                String         @id @default(uuid())
  healthEventId     String?        @map("health_event_id")
  animalId          String         @map("animal_id")
  farmId            String         @map("farm_id")
  drug              String // Drug name
  dose              String // Dose amount and unit
  route             TreatmentRoute
  frequency         String // e.g., "2x daily", "once"
  duration          Int? // Duration in days
  startDate         DateTime       @map("start_date")
  withdrawalMilkEnd DateTime?      @map("withdrawal_milk_end") // Milk withdrawal end date
  withdrawalMeatEnd DateTime?      @map("withdrawal_meat_end") // Meat withdrawal end date
  lot               String? // Batch/lot number
  expiry            DateTime? // Expiration date
  createdBy         String         @map("created_by")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")

  healthEvent HealthEvent? @relation(fields: [healthEventId], references: [id], onDelete: SetNull)
  animal      Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  farm        Farm         @relation(fields: [farmId], references: [id], onDelete: Cascade)

  // Relations
  doses Dose[]

  @@index([farmId, startDate])
  @@index([animalId])
  @@index([withdrawalMilkEnd])
  @@index([withdrawalMeatEnd])
  @@map("treatments")
}

enum DoseStatus {
  SCHEDULED
  GIVEN
  SKIPPED
  OVERDUE
}

model Dose {
  id          String     @id @default(uuid())
  treatmentId String     @map("treatment_id")
  animalId    String     @map("animal_id")
  scheduledAt DateTime   @map("scheduled_at")
  givenAt     DateTime?  @map("given_at")
  givenBy     String?    @map("given_by")
  notes       String?
  status      DoseStatus @default(SCHEDULED)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  treatment Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
  animal    Animal    @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@index([animalId, scheduledAt])
  @@index([status, scheduledAt])
  @@map("doses")
}

// ============================================================================
// WEIGHT & FEED
// ============================================================================

enum WeightMethod {
  SCALE
  TAPE
  VISUAL_ESTIMATE
}

model Weight {
  id         String       @id @default(uuid())
  animalId   String       @map("animal_id")
  farmId     String       @map("farm_id")
  date       DateTime
  kg         Float // Weight in kilograms
  method     WeightMethod @default(SCALE)
  notes      String?
  recordedBy String       @map("recorded_by")
  createdAt  DateTime     @default(now()) @map("created_at")

  animal Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)
  farm   Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([farmId, date])
  @@index([animalId, date])
  @@map("weights")
}

model FeedPlan {
  id         String    @id @default(uuid())
  farmId     String    @map("farm_id")
  name       String
  components Json // Array of feed components with ratios
  ratios     Json // Mixing ratios
  startDate  DateTime? @map("start_date")
  endDate    DateTime? @map("end_date")
  createdBy  String    @map("created_by")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([farmId])
  @@map("feed_plans")
}

enum LambFeedingMethod {
  NURSING
  MANUFACTURED
}

model LambFeeding {
  id            String            @id @default(uuid())
  lambId        String            @map("lamb_id")
  farmId        String            @map("farm_id")
  method        LambFeedingMethod
  startDate     DateTime          @map("start_date")
  endDate       DateTime?         @map("end_date")
  volumePerDay  Float?            @map("volume_per_day") // Liters per day (for manufactured)
  notes         String?
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")

  lamb Animal @relation(fields: [lambId], references: [id], onDelete: Cascade)
  farm Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([lambId])
  @@index([farmId, method])
  @@map("lamb_feedings")
}

// ============================================================================
// MILK & SALES
// ============================================================================

model MilkYield {
  id         String   @id @default(uuid())
  animalId   String   @map("animal_id")
  farmId     String   @map("farm_id")
  at         DateTime // Timestamp of yield
  liters     Float
  recordedBy String   @map("recorded_by")
  createdAt  DateTime @default(now()) @map("created_at")

  animal Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)
  farm   Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([farmId, at])
  @@index([animalId, at])
  @@map("milk_yields")
}

model MilkSale {
  id            String   @id @default(uuid())
  farmId        String   @map("farm_id")
  date          DateTime
  volumeLiters  Float    @map("volume_liters")
  pricePerLiter Float    @map("price_per_liter")
  buyerName     String?  @map("buyer_name")
  totalRevenue  Float    @map("total_revenue")
  createdBy     String   @map("created_by")
  createdAt     DateTime @default(now()) @map("created_at")

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([farmId, date])
  @@map("milk_sales")
}

enum AnimalSaleType {
  LIVE
  SLAUGHTER
  CULL
}

model AnimalSale {
  id        String         @id @default(uuid())
  animalId  String         @map("animal_id")
  farmId    String         @map("farm_id")
  date      DateTime
  type      AnimalSaleType
  weightKg  Float?         @map("weight_kg")
  price     Float
  buyerName String?        @map("buyer_name")
  createdBy String         @map("created_by")
  createdAt DateTime       @default(now()) @map("created_at")

  animal Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)
  farm   Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([farmId, date])
  @@index([animalId])
  @@map("animal_sales")
}

// ============================================================================
// INVENTORY
// ============================================================================

enum InventoryCategory {
  FEED
  MEDICINE
  VACCINE
  SUPPLEMENT
  EQUIPMENT
  SUPPLIES
  OTHER
}

model InventoryItem {
  id           String            @id @default(uuid())
  farmId       String            @map("farm_id")
  name         String
  category     InventoryCategory
  unit         String // e.g., "kg", "liters", "doses", "pieces"
  reorderLevel Float?            @map("reorder_level")
  supplierId   String?           @map("supplier_id")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  farm     Farm               @relation(fields: [farmId], references: [id], onDelete: Cascade)
  supplier Supplier?          @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  // Relations
  batches      InventoryBatch[]
  transactions InventoryTransaction[]

  @@index([farmId, category])
  @@map("inventory_items")
}

model Supplier {
  id        String   @id @default(uuid())
  farmId    String   @map("farm_id")
  name      String
  phone     String?
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  // Relations
  items   InventoryItem[]
  batches InventoryBatch[]

  @@index([farmId])
  @@map("suppliers")
}

model InventoryBatch {
  id           String    @id @default(uuid())
  itemId       String    @map("item_id")
  farmId       String    @map("farm_id")
  batchCode    String    @map("batch_code")
  quantity     Float
  unitCost     Float     @map("unit_cost")
  purchaseDate DateTime  @map("purchase_date")
  supplierId   String?   @map("supplier_id")
  expiryDate   DateTime? @map("expiry_date")
  createdAt    DateTime  @default(now()) @map("created_at")

  item     InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  farm     Farm          @relation(fields: [farmId], references: [id], onDelete: Cascade)
  supplier Supplier?     @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  @@index([farmId, itemId])
  @@index([expiryDate])
  @@map("inventory_batches")
}

enum InventoryTransactionType {
  PURCHASE
  USAGE
  ADJUSTMENT
  WASTE
}

enum CostSource {
  BATCH
  FIFO
  LAST_KNOWN
  CATALOG
  DERIVED
  FUZZY
  REFERENCE
  ZERO
}

enum CostConfidence {
  HIGH
  MEDIUM
  LOW
}

model InventoryTransaction {
  id         String                   @id @default(uuid())
  itemId     String                   @map("item_id")
  farmId     String                   @map("farm_id")
  type       InventoryTransactionType
  quantity   Float
  batchId    String?                  @map("batch_id") // For FIFO tracking
  costValue  Float?                   @map("cost_value") // Cost amount
  costSource CostSource?              @map("cost_source") // How cost was resolved
  confidence CostConfidence?          // Confidence level
  date       DateTime
  notes      String?
  createdBy  String                   @map("created_by")
  createdAt  DateTime                 @default(now()) @map("created_at")

  item InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  farm Farm          @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([farmId, date])
  @@index([itemId, date])
  @@map("inventory_transactions")
}

// ============================================================================
// INSIGHTS & CAUSALITY
// ============================================================================

enum ActionEventType {
  SHEARING
  SUPPLIER_CHANGE
  RATION_CHANGE
  PROTOCOL_SHIFT
  PEN_MOVE
  OTHER
}

model ActionEvent {
  id                 String          @id @default(uuid())
  farmId             String          @map("farm_id")
  type               ActionEventType
  date               DateTime
  affectedAnimalIds  String[]        @map("affected_animal_ids") // Array of animal IDs
  payload            Json? // Event-specific data
  createdBy          String          @map("created_by")
  createdAt          DateTime        @default(now()) @map("created_at")

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  // Relations
  insightCards InsightCard[]

  @@index([farmId, date])
  @@map("action_events")
}

enum MetricType {
  ADG // Average Daily Gain
  MILK_YIELD
  CONCEPTION_RATE
  SICKNESS_RATE
  MORTALITY_RATE
  OTHER
}

model MetricSnapshot {
  id         String     @id @default(uuid())
  farmId     String     @map("farm_id")
  metricType MetricType @map("metric_type")
  value      Float
  date       DateTime
  cohort     String? // Optional cohort identifier
  createdAt  DateTime   @default(now()) @map("created_at")

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([farmId, metricType, date])
  @@map("metric_snapshots")
}

enum InsightConfidence {
  HIGH
  MEDIUM
  LOW
}

enum InsightStatus {
  ACTIVE
  CONFIRMED
  MUTED
}

model InsightCard {
  id            String            @id @default(uuid())
  farmId        String            @map("farm_id")
  actionEventId String?           @map("action_event_id")
  title         String
  narrative     String            @db.Text
  effectPercent Float?            @map("effect_percent") // % change
  lagDays       Int?              @map("lag_days") // Lag in days
  windowStart   DateTime?         @map("window_start")
  windowEnd     DateTime?         @map("window_end")
  confidence    InsightConfidence
  status        InsightStatus     @default(ACTIVE)
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")

  farm        Farm         @relation(fields: [farmId], references: [id], onDelete: Cascade)
  actionEvent ActionEvent? @relation(fields: [actionEventId], references: [id], onDelete: SetNull)

  @@index([farmId, status])
  @@map("insight_cards")
}

// ============================================================================
// NOTIFICATIONS & SYNC
// ============================================================================

enum ReminderType {
  BREEDING_INS2
  BREEDING_CHECK1
  BREEDING_CHECK2
  BREEDING_LAMBING_PREP
  BREEDING_OVERDUE
  HEALTH_DOSE_DUE
  HEALTH_DOSE_OVERDUE
  INVENTORY_LOW_STOCK
  INVENTORY_EXPIRY
}

enum ReminderStatus {
  PENDING
  SENT
  DISMISSED
  COMPLETED
}

model Reminder {
  id             String         @id @default(uuid())
  farmId         String         @map("farm_id")
  type           ReminderType
  dueDate        DateTime       @map("due_date")
  targetEntityId String?        @map("target_entity_id") // ID of related entity
  status         ReminderStatus @default(PENDING)
  createdBy      String         @map("created_by")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([farmId, status, dueDate])
  @@map("reminders")
}

enum NotificationType {
  LAMBING
  PREGNANCY_RESULT
  DOSE_DUE
  DOSE_OVERDUE
  MILK_DISCARDED
  SALE_POSTED
  LOW_STOCK
  EXPIRY_WARNING
  INSIGHT_GENERATED
}

model NotificationInbox {
  id             String           @id @default(uuid())
  userId         String           @map("user_id")
  farmId         String?          @map("farm_id")
  type           NotificationType
  title          String
  body           String           @db.Text
  targetEntityId String?          @map("target_entity_id")
  read           Boolean          @default(false)
  createdAt      DateTime         @default(now()) @map("created_at")

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  farm Farm? @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([farmId, createdAt])
  @@map("notification_inbox")
}

enum Platform {
  IOS
  ANDROID
  WEB
}

model DeviceToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique // FCM token
  platform  Platform
  createdAt DateTime @default(now()) @map("created_at")
  lastUsed  DateTime @default(now()) @map("last_used")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("device_tokens")
}

// Tombstones for soft deletes (offline sync)
model Tombstone {
  id        String   @id @default(uuid())
  farmId    String   @map("farm_id")
  entity    String // Entity type (e.g., "Animal", "BreedingCycle")
  entityId  String   @map("entity_id") // ID of deleted entity
  deletedAt DateTime @default(now()) @map("deleted_at")
  deletedBy String   @map("deleted_by")

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([farmId, entity, deletedAt])
  @@map("tombstones")
}

// Audit log for all mutations
model AuditLog {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  farmId     String?  @map("farm_id")
  action     String // Action performed
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  farm Farm? @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([farmId, createdAt])
  @@map("audit_logs")
}

// Attachments (photos, documents)
model Attachment {
  id         String   @id @default(uuid())
  farmId     String   @map("farm_id")
  entityType String   @map("entity_type") // e.g., "Animal", "HealthEvent"
  entityId   String   @map("entity_id")
  filename   String
  mimeType   String   @map("mime_type")
  sizeBytes  Int      @map("size_bytes")
  storageKey String   @map("storage_key") // S3/Spaces key
  uploadedBy String   @map("uploaded_by")
  createdAt  DateTime @default(now()) @map("created_at")

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([farmId, entityType, entityId])
  @@map("attachments")
}

